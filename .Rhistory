scope_dataframe <- function(x) {
# Test if the colname includes 'mean()' or 'std()'
if ( grepl("mean()", x[2]) | grepl("std()", x[2]) ) {
# Add column number and name to their respective temporary vectors
scoped_col_num <<- c(scoped_col_num, x[1])
scoped_col_name <<- c(scoped_col_name, x[2])
}
}
# Iterate through the feature list using the apply function calling: scope_dataframe
outapply <- apply(df_col_info, 1, scope_dataframe)
# Create the scoped data frame
updated_feature_list <- data.frame(scoped_col_num, scoped_col_name)
colnames(updated_feature_list) <- c("ColumnNumber", "ColumnName")
# We now have an updated feature list
# Remove unnecessary objects so far
remove(scoped_col_num, scoped_col_name)
# Determine the number of columns we're scoping down to
number_columns <- nrow(updated_feature_list)
# Create a new matrix
test_matrix <- matrix(,,number_columns,TRUE)
# Read through the test data set
test_file_name <- "X_test.txt"
# Open a connection to the file
test_file_conn <- file(test_file_name, open="r")
# Read the file contents as lines
test_file_lines <- readLines(test_file_conn)
# Iterate through the lines
for (i in 1:length(test_file_lines)) {
# Save the current line into a temporary value
tmp_test_file_line <- test_file_lines[i]
# Remove leading and trailing whitespace
gsub("^\\s+|\\s+$", "", tmp_test_file_line)
# Replace instances of contiguous whitespace with a single space
gsub("\\s+", " ", tmp_test_file_line)
# Split the line into a vector of elements
tmp_test_file_line_vector <- strsplit(tmp_test_file_line, " ")
# Coerce vector of numbers expressed as string into a numeric vector
tmp_test_file_line_vector <- as.double(tmp_test_file_line_vector)
# Create a matrix if processing the first line
#    or append to the already created matrix if any other line
if (i == 1) {
mtx_test_dataset <- matrix(tmp_test_file_line_vector, nrow = 1, ncol = length(tmp_test_file_line_vector))
} else {
mtx_test_dataset <- rbind(mtx_test_dataset, tmp_test_file_line_vector)
}
}
close(test_file_conn)
print(head(mtx_test_dataset))
# Read the file containing the feature information, which includes:
#   1. Number of the specified column in the dataset
#   2. Name of the specified column in the dataset
df_col_info <- read.table("features.txt")
# Create some working variables
scoped_col_num <- numeric()            # Vector to hold the feature number
scoped_col_name <- character()         # Vector to hold the feature name
# Function used when iterating through the feature dataframe
# The function effective removes references to features other than mean() and std()
scope_dataframe <- function(x) {
# Test if the colname includes 'mean()' or 'std()'
if ( grepl("mean()", x[2]) | grepl("std()", x[2]) ) {
# Add column number and name to their respective temporary vectors
scoped_col_num <<- c(scoped_col_num, x[1])
scoped_col_name <<- c(scoped_col_name, x[2])
}
}
# Iterate through the feature list using the apply function calling: scope_dataframe
outapply <- apply(df_col_info, 1, scope_dataframe)
# Create the scoped data frame
updated_feature_list <- data.frame(scoped_col_num, scoped_col_name)
colnames(updated_feature_list) <- c("ColumnNumber", "ColumnName")
# We now have an updated feature list
# Remove unnecessary objects so far
remove(scoped_col_num, scoped_col_name)
# Determine the number of columns we're scoping down to
number_columns <- nrow(updated_feature_list)
# Create a new matrix
test_matrix <- matrix(,,number_columns,TRUE)
# Read through the test data set
test_file_name <- "X_test.txt"
# Open a connection to the file
test_file_conn <- file(test_file_name, open="r")
# Read the file contents as lines
test_file_lines <- readLines(test_file_conn)
# Iterate through the lines
for (i in 1:length(test_file_lines)) {
# Save the current line into a temporary value
tmp_test_file_line <- test_file_lines[i]
# Remove leading and trailing whitespace
gsub("^\\s+|\\s+$", "", tmp_test_file_line)
# Replace instances of contiguous whitespace with a single space
gsub("\\s+", " ", tmp_test_file_line)
# Split the line into a vector of elements
tmp_test_file_line_vector <- strsplit(tmp_test_file_line, " ")
# Coerce vector of numbers expressed as string into a numeric vector
tmp_test_file_line_vector <- as.double(tmp_test_file_line_vector)
# Create a matrix if processing the first line
#    or append to the already created matrix if any other line
if (i == 1) {
mtx_test_dataset <- matrix(tmp_test_file_line_vector, nrow = 1, ncol = length(tmp_test_file_line_vector))
} else {
mtx_test_dataset <- rbind(mtx_test_dataset, tmp_test_file_line_vector)
}
}
close(test_file_conn)
print(head(mtx_test_dataset))
View(updated_feature_list)
# Read the file containing the feature information, which includes:
#   1. Number of the specified column in the dataset
#   2. Name of the specified column in the dataset
df_col_info <- read.table("features.txt")
# Create some working variables
scoped_col_num <- numeric()            # Vector to hold the feature number
scoped_col_name <- character()         # Vector to hold the feature name
# Function used when iterating through the feature dataframe
# The function effective removes references to features other than mean() and std()
scope_dataframe <- function(x) {
# Test if the colname includes 'mean()' or 'std()'
if ( grepl("mean()", x[2], fixed=TRUE) | grepl("std()", x[2], fixed=TRUE) ) {
# Add column number and name to their respective temporary vectors
scoped_col_num <<- c(scoped_col_num, x[1])
scoped_col_name <<- c(scoped_col_name, x[2])
}
}
# Iterate through the feature list using the apply function calling: scope_dataframe
outapply <- apply(df_col_info, 1, scope_dataframe)
# Create the scoped data frame
updated_feature_list <- data.frame(scoped_col_num, scoped_col_name)
colnames(updated_feature_list) <- c("ColumnNumber", "ColumnName")
# We now have an updated feature list
# Remove unnecessary objects so far
remove(scoped_col_num, scoped_col_name)
# Determine the number of columns we're scoping down to
number_columns <- nrow(updated_feature_list)
# Create a new matrix
test_matrix <- matrix(,,number_columns,TRUE)
# Read through the test data set
test_file_name <- "X_test.txt"
# Open a connection to the file
test_file_conn <- file(test_file_name, open="r")
# Read the file contents as lines
test_file_lines <- readLines(test_file_conn)
# Iterate through the lines
for (i in 1:length(test_file_lines)) {
# Save the current line into a temporary value
tmp_test_file_line <- test_file_lines[i]
# Remove leading and trailing whitespace
gsub("^\\s+|\\s+$", "", tmp_test_file_line)
# Replace instances of contiguous whitespace with a single space
gsub("\\s+", " ", tmp_test_file_line)
# Split the line into a vector of elements
tmp_test_file_line_vector <- strsplit(tmp_test_file_line, " ")
# Coerce vector of numbers expressed as string into a numeric vector
tmp_test_file_line_vector <- as.double(tmp_test_file_line_vector)
# Create a matrix if processing the first line
#    or append to the already created matrix if any other line
if (i == 1) {
mtx_test_dataset <- matrix(tmp_test_file_line_vector, nrow = 1, ncol = length(tmp_test_file_line_vector))
} else {
mtx_test_dataset <- rbind(mtx_test_dataset, tmp_test_file_line_vector)
}
}
close(test_file_conn)
print(head(mtx_test_dataset))
View(updated_feature_list)
class(tmp_test_file_line)
is.vector(tmp_test_file_line)
my_string <- "    oh yea   "
gsub("^\\s+|\\s_$", "", my_string)
gsub("\\s_$", "", my_string)
?strsplit
typeof(my_string)
class(my_string)
is.list(my_string)
?stop
# Read the file containing the feature information, which includes:
#   1. Number of the specified column in the dataset
#   2. Name of the specified column in the dataset
df_col_info <- read.table("features.txt")
# Create some working variables
in_scope_col_num <- numeric()            # Vector to hold the feature number
in_scope_col_name <- character()         # Vector to hold the feature name
out_scope_col_num <- numeric()           # Vector to hold the feature number that are to be removed
# Function used when iterating through the feature dataframe
# The function effective removes references to features other than mean() and std()
scope_dataframe <- function(x) {
# Test if the colname includes 'mean()' or 'std()'
if ( grepl("mean()", x[2], fixed=TRUE) | grepl("std()", x[2], fixed=TRUE) ) {
# Add column number and name to their respective temporary vectors representing in scope features
in_scope_col_num <<- c(scoped_col_num, x[1])
in_scope_col_name <<- c(scoped_col_name, x[2])
} else {
# Add the colunm number to the vector representing out of scope features
out_scope_col_num <<- c(scoped_col_num, x[1])
}
}
# Iterate through the feature list using the apply function calling: scope_dataframe
outapply <- apply(df_col_info, 1, scope_dataframe)
# Create the scoped data frame
updated_feature_list <- data.frame(scoped_col_num, scoped_col_name)
colnames(updated_feature_list) <- c("ColumnNumber", "ColumnName")
# We now have an updated feature list
# Determine the number of columns we're scoping down to
number_columns <- nrow(updated_feature_list)
# Create a new matrix
test_matrix <- matrix(,,number_columns,TRUE)
# Read through the test data set
test_file_name <- "X_test.txt"
# Open a connection to the file
test_file_conn <- file(test_file_name, open="r")
# Read the file contents as lines
test_file_lines <- readLines(test_file_conn)
# Iterate through the lines
for (i in 1:length(test_file_lines)) {
# Save the current line into a temporary value
tmp_test_file_line <- test_file_lines[i]
# Remove leading and trailing whitespace
tmp_test_file_line <- gsub("^\\s+", "", tmp_test_file_line)
# Remove leading and trailing whitespace
tmp_test_file_line <- gsub("\\s+$", "", tmp_test_file_line)
# Replace instances of contiguous whitespace with a single space
tmp_test_file_line <- gsub("\\s+", " ", tmp_test_file_line)
# Split the line into a vector of elements
tmp_test_file_line_list <- strsplit(tmp_test_file_line, " ", fixed = TRUE)
# Coerce vector of numbers expressed as string into a numeric vector
tmp_test_file_line_vector <- as.numeric(tmp_test_file_line_list[[1]])
# Create a matrix if processing the first line
#    or append to the already created matrix if any other line
if (i == 1) {
mtx_test_dataset <- matrix(tmp_test_file_line_vector, nrow = 1, ncol = length(tmp_test_file_line_vector))
} else {
mtx_test_dataset <- rbind(mtx_test_dataset, tmp_test_file_line_vector)
}
}
# Remove matrix columns not needed or out of scope (non 'mean' and non 'std' columns)
mtx_test_dataset <- mtx_test_dataset[ , -out_scope_col_num]
close(test_file_conn)
print(ncol(mtx_test_dataset))
library(pplyr)
library("plyr")
?mean
if(!file.exists("./data")){dir.create("./data")}
fileUrl1 = "https://d396qusza40orc.cloudfront.net/getdata/data/ss06hid.csv"
download.file(fileUrl1,destfile="./data/reviews.csv",method="curl")
idaho_housing = read.csv("./data/idaho_housing.csv")
if(!file.exists("./data")){dir.create("./data")}
fileUrl1 = "https://d396qusza40orc.cloudfront.net/getdata/data/ss06hid.csv"
download.file(fileUrl1,destfile="./data/idaho_housing.csv",method="curl")
idaho_housing = read.csv("./data/idaho_housing.csv")
View(idaho_housing)
agricultureLogical < idaho_housing[(idaho_housing$ACR == 3 & idaho_housing$ACR == 6),]
agricultureLogical <- idaho_housing[(idaho_housing$ACR == 3 & idaho_housing$ACR == 6),]
View(agricultureLogical)
which(agricultureLogical)
agricultureLogical <- idaho_housing[(idaho_housing$ACR == 3 & idaho_housing$ACR == 6), idaho_housing$SERIALNO]
agricultureLogical <- idaho_housing[(idaho_housing$ACR == 3 & idaho_housing$AGS == 6), idaho_housing$SERIALNO]
head(idaho_housing)
idaho_housing[(idaho_housing$ACR == 3 & idaho_housing$AGS == 6), idaho_housing$SERIALNO]
idaho_housing[idaho_housing$SERIALNO == 186]
idaho_housing[idaho_housing$SERIALNO == 186, ]
nrow(idaho_housing[idaho_housing$SERIALNO == 186, ])
nrow(idaho_housing[idaho_housing$ACR == 3, ])
nrow(idaho_housing[idaho_housing$ACR == 3 & idaho_housing$AGS == 6, ])
nrow(idaho_housing[idaho_housing$ACR == 3 & idaho_housing$AGS == 6, idaho_housing$SERIALNO])
nrow(idaho_housing[idaho_housing$ACR == 3 & idaho_housing$AGS == 6, "SERIALNO"])
agricultureLogical <- idaho_housing[idaho_housing$ACR == 3 & idaho_housing$AGS == 6, ])
agricultureLogical <- idaho_housing[idaho_housing$ACR == 3 & idaho_housing$AGS == 6, ]
agricultureLogical
agricultureLogical <- idaho_housing[which(idaho_housing$ACR == 3 & idaho_housing$AGS == 6), ]
agricultureLogical
head(agricultureLogical)
install.packages("jpeg")
download.file("https://d396qusza40orc.cloudfront.net/getdata/jeff.jpg",destfile="./data/jeff.jpg")
download.file("http://d396qusza40orc.cloudfront.net/getdata/jeff.jpg",destfile="./data/jeff.jpg")
jeff_pic <- readJPEG("./data/jeff.jpg", native = TRUE)
library("jpeg")
jeff_pic <- readJPEG("./data/jeff.jpg", native = TRUE)
quantile(jeff_pic, probs = c(0.3, 0.55, 0.8))
fileUrl1 = "https://d396qusza40orc.cloudfront.net/getdata/data/GDP.csv"
download.file(fileUrl1,destfile="./data/gdp.csv",method="curl")
gdp_data = read.csv("./data/gdp.csv")
fileUrl2 = "https://d396qusza40orc.cloudfront.net/getdata/data/EDSTATS_Country.csv"
download.file(fileUrl2,destfile="./data/country.csv",method="curl")
country_data = read.csv("./data/country.csv")
head(gdp_data)
head(country_data)
View(agricultureLogical)
View(country_data)
View(gdp_data)
mergedData = merge(country_data, gdp_data, by.x = "CountryCode", by.y = "X", all = TRUE)
head(mergedData)
?merge
mergedData = merge(country_data, gdp_data, by.x = "CountryCode", by.y = "X")
head(mergedData)
nrow(mergedData)
mergedData
nrow(country_data)
nrow(gdp_data)
mergedData = merge(country_data, gdp_data, by.x = "CountryCode", by.y = "X", all = TRUE)
nrow(mergedData)
mergedData = merge(country_data, gdp_data, by.x = "CountryCode", by.y = "X", all = FALSE)
nrow(mergedData)
View(mergedData)
?order
sorted_merged_df <- mergedData[order(mergedData$Gross.domestic.product.2012, decreasing = TRUE), ]
View(sorted_merged_df)
sorted_merged_df <- mergedData[order(as.numeric(mergedData$Gross.domestic.product.2012), decreasing = TRUE), ]
sorted_merged_df <- mergedData[order(as.numeric(mergedData$Gross.domestic.product.2012), decreasing = TRUE), ]
View(sorted_merged_df)
mergedData = merge(country_data, gdp_data, by.x = "CountryCode", by.y = "X", all = FALSE)
sorted_merged_df <- mergedData[order(as.numeric(as.character(mergedData$Gross.domestic.product.2012)), decreasing = TRUE), ]
View(sorted_merged_df)
ddply(sorted_merged_df$Income.Group == "High income: OECD", "Gross.domestic.product.2012", "mean")
library('plyr')
ddply(sorted_merged_df$Income.Group == "High income: OECD", "Gross.domestic.product.2012", "mean")
ddply(sorted_merged_df, "Income.Group", "Gross.domestic.product.2012", mean)
View(mergedData)
View(sorted_merged_df)
out_q4 <- ddply(mergedData, c('Income.Group'), function(x) colMeans(x[1:189))
out_q4 <- ddply(mergedData, c('Income.Group'), function(x) colMeans(x[1:189])
)
out_q4 <- ddply(sorted_merged_df, c('Income.Group'), function(x) colMeans(x[1:189]))
out_q4 <- ddply(sorted_merged_df, "Income.Group", function(x) colMeans(x[1:189]))
out_q4 <- ddply(sorted_merged_df, "Income.Group", function(x) colMeans(x))
out_q4 <- ddply(sorted_merged_df, "Income.Group", colMeans)
out_q4 <- ddply(sorted_merged_df, "Income.Group", colMeans(as.numeric(x)))
out_q4 <- ddply(sorted_merged_df, "Income.Group", function(x) colMeans(x[32]))
out_q4 <- ddply(sorted_merged_df, "Income.Group", function(x) colMeans(as.numeric(x[32])))
out_q4 <- ddply(sorted_merged_df, "Income.Group", function(x) colMeans(as.numeric(as.character(x[32]))))
?merge
getwd()
country_data <- read.csv("./data/country.csv")
View(country_data)
gdp_data <- read.csv("./data/gdp.csv")
View(gdp_data)
gdp_data$gdp_rank_num <- as.numeric(as.character(gdp_data$Gross.domestic.product.2012))
View(gdp_data)
View(gdp_data)
View(country_data)
View(country_data)
merged_data <- merge(country_data, gdp_data, by.x = "CountryCode", by.y = "X", all = FALSE)
View(merged_data)
View(merged_data)
?arrange
library(plyr)
?arrange
merged_date_sorted <- arrange(merged_data, desc(gdp_rank_num))
View(merged_date_sorted)
View(merged_date_sorted)
q4_df <- merged_date_sorted[(merged_date_sorted$Income.Group == "High income: OECD"),]
View(`q4_df`)
View(`q4_df`)
colMeans(q4_df)
colMeans(q4_df$gdp_rank_num)
my_numeric_vector <- q4_df$gdp_rank_num
class(my_numeric_vector)
mean(my_numeric_vector)
q4_df_b <- merged_date_sorted[(merged_date_sorted$Income.Group == "High income: nonOECD"),]
View(`q4_df_b`)
View(`q4_df_b`)
my_numeric_vector <- q4_df_b$gdp_rank_num
mean(my_numeric_vector)
mean(my_numeric_vector, na.rm=TRUE)
q5_df <- merged_date_sorted[,c("gdp_rank_num","Income.Group")]
View(`q5_df`)
?quantile
quantile(q5_df$gdp_rank_num)
quantile(q5_df$gdp_rank_num, na.rm = TRUE)
q5_df
?complete.cases
q5_df_compcases <- q5_df[complete.cases(q5_df),]
View(`q5_df_compcases`)
q5_df_compcases$gdp_quantile_id = cut(q5_df_compcases$gdp_rank_num, breaks = quantile(q5_df_compcases$gdp_rank_num))
View(`q5_df_compcases`)
class(q5_df_compcases$gdp_quantile_id)
?table
table(q5_df_compcases$Income.Gropu, q5_df_compcases$gdp_quantile_id)
q5_df_compcases[189, 3] <- as.factor("(1,48]")
View(`q5_df_compcases`)
View(`q5_df_compcases`)
table(q5_df_compcases$Income.Gropu, q5_df_compcases$gdp_quantile_id)
table(q5_df_compcases$Income.Group, q5_df_compcases$gdp_quantile_id)
q5_df_compcases$gdp_quantile_id = cut(q5_df_compcases$gdp_rank_num, breaks = quantile(q5_df_compcases$gdp_rank_num, probs = c(0.2, 0.4, 0.6. 0.8)))
q5_df_compcases$gdp_quantile_id = cut(q5_df_compcases$gdp_rank_num, breaks = quantile(q5_df_compcases$gdp_rank_num, probs = c(0.2, 0.4, 0.6, 0.8)))
View(`q5_df_compcases`)
View(`q5_df_compcases`)
q5_df_compcases$gdp_quantile_id = cut(q5_df_compcases$gdp_rank_num, breaks = quantile(q5_df_compcases$gdp_rank_num, probs=seq(0,1, by=0.20)))
View(`q5_df_compcases`)
?cut
q5_df_compcases$gdp_quantile_id = cut(q5_df_compcases$gdp_rank_num, breaks = quantile(q5_df_compcases$gdp_rank_num, probs=seq(0,1, by=0.20)), include.lowest=TRUE)
View(`q5_df_compcases`)
table(q5_df_compcases$Income.Group, q5_df_compcases$gdp_quantile_id)
?write.table
write.table(gdp_data$X, "./data/gdp_out.txt")
write.table(country_data$CountryCode, "./data/countrycode_out.txt")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
data(mpg)
qplot(displ, hwy, data = mpg)
View(mpg)
install.packages("lattice")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
plot
hist
?par
clear()
clear
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
library(datasets)
with(airquality, plot(Wind, Ozone))
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City!"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City",
pch = 20))
model <- lm(Ozone ~ Wind, airquality)
model
abline(model, lwd = 2)
abline(model, lwd = 2, col = green)
abline(model, lwd = 2, col = 'green')
?par
par()
?text()
?quartz
setwd("~/Documents/Dropbox/dropdocs/personal/danocode/datascience/CourseraSpecialization/course_work/04_ExploratoryDataAnalysis/Project01/working_directory")
ls
# Read the raw data into a data frame
myFrame <- read.table(file="household_power_consumption.txt",header=TRUE,sep=";",na.strings="?", as.is=c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE))
# Subset the data to observations for
myFrame.sub <- myFrame[(myFrame$Date == "1/2/2007" | myFrame$Date == "2/2/2007"),]
# Combine the date and time columns into a new column
myFrame.sub$Date_Time <- paste(myFrame.sub$Date, myFrame.sub$Time, sep=" ")
# Translate the date string into a more friendly date format
myFrame.sub$Date_Time <- gsub('1/2/2007', '2007-02-01', myFrame.sub$Date_Time)
myFrame.sub$Date_Time <- gsub('2/2/2007', '2007-02-02', myFrame.sub$Date_Time)
# Convert the date/time represented as a character format to an R data/time object
myFrame.sub$DateTime <- strptime(myFrame.sub$Date_Time, "%Y-%m-%d %H:%M:%S")
# Read the raw data into a data frame
myFrame <- read.table(file="household_power_consumption.txt",header=TRUE,sep=";",na.strings="?", as.is=c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE))
# Subset the data to observations for
myFrame.sub <- myFrame[(myFrame$Date == "1/2/2007" | myFrame$Date == "2/2/2007"),]
# Combine the date and time columns into a new column
myFrame.sub$Date_Time <- paste(myFrame.sub$Date, myFrame.sub$Time, sep=" ")
# Translate the date string into a more friendly date format
myFrame.sub$Date_Time <- gsub('1/2/2007', '2007-02-01', myFrame.sub$Date_Time)
myFrame.sub$Date_Time <- gsub('2/2/2007', '2007-02-02', myFrame.sub$Date_Time)
# Convert the date/time represented as a character format to an R data/time object
myFrame.sub$Date_Time <- strptime(myFrame.sub$Date_Time, "%Y-%m-%d %H:%M:%S")
setwd("~/Documents/Dropbox/dropdocs/personal/danocode/datascience/CourseraSpecialization/course_work/04_ExploratoryDataAnalysis/Project01/github/ExData_Plotting1")
##############################################################################################
# Description:
# plot1.r plots a histogram of Global Active Power
#
####
# Read the massaged data to be plotted
source("dumpdata.R")
####
# Read the massaged data to be plotted
# Read the massaged data to be plotted
source("readdata/dumpdata.R")
View(myFrame.sub)
##############################################################################################
# Description:
# plot1.r plots a histogram of Global Active Power
#
####
# Read the massaged data to be plotted
source("readdata/dumpdata.R")
hist("myFrame.sub")
hist("myFrame.sub$Global_active_power")
hist(myFrame.sub$Global_active_power)
title(main = "Dan's Faithful Geyser data")
plot(myFrame.sub$Global_active_power)
hist_obj <- hist("myFrame.sub", col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency")
hist_obj <- hist("myFrame.sub$Global_active_power", col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency")
hist_obj <- hist(myFrame.sub$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency")
##############################################################################################
# Description:
# plot1.r plots a histogram of Global Active Power
#
####
# Read the massaged data to be plotted
source("readdata/dumpdata.R")
# Create a histogram object to be plotted to a png file
hist_obj <- hist(myFrame.sub$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency")
# Generate the plots
plot(hist_obj)
##############################################################################################
# Description:
# plot1.r plots a histogram of Global Active Power
#
####
# Read the massaged data to be plotted
source("readdata/dumpdata.R")
# Configure a png device
png(filename="figure/plot1.png", width=480, height=480)
# Create a histogram object to be plotted to a png file
hist_obj <- hist(myFrame.sub$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency")
plot(hist_obj)
